#!/usr/bin/env bash

COMMAND=${1:-"help"}
DEX_APP_ROOT=${DEX_APP_ROOT:-"$HOME/apps/dex"}
export NETWORK=${NETWORK:-"testnet"}
shift

goto () {
  if [ -d "$DEX_APP_ROOT/$1" ]; then
    cd "$DEX_APP_ROOT/$1"
  else
    >&2 echo "$0: no such directory: $DEX_APP_ROOT"
    exit 1
  fi
}

build_service_image ()  {
  app_name=$1
  result=$(nix-build --no-out-link release.nix -A "$app_name")

  docker load < "$result"
  docker tag "dex-$app_name" "plutus4binarapps/dex-$app_name"
  docker push "plutus4binarapps/dex-$app_name"
  rm "$result"
}

help_msg () {
  >&2 echo "usage: $0 [build|up|down|run|restart|ps|logs|update|help]"
  >&2 echo
  >&2 echo '  build    Build image ("chain-index" | "backend" | "middleware" | "faucet") (default: all).'
  >&2 echo '  up       Launch the application (all services).'
  >&2 echo '  down     Terminate the application (all services).'
  >&2 echo '  run      Run instance of the service (see: `docker-compose run` for arguments).'
  >&2 echo '  restart  Restart service (see: `docker-compose restart` for arguments).'
  >&2 echo '  ps       Enlist services and their statuses.'
  >&2 echo '  logs     Enlist application logs (see: `docker-compose logs` for arguments).'
  >&2 echo '  update   Perform a git pull on repository (see: `git pull` for arguments).'
}

case "$COMMAND" in
  build)
    goto
    if [ -z ${1+x} ]; then
      build_service_image "chain-index"
      build_service_image "backend"
      build_service_image "middleware"
      build_service_image "faucet"
    else
      build_service_image "$1"
    fi
    ;;

  up)
    goto "infrastructure"
    docker-compose up -d
    ;;

  down)
    goto "infrastructure"
    docker-compose down --remove-orphans
    ;;

  run)
    goto "infrastructure"
    docker-compose run --rm $@
    ;;

  restart)
    goto "infrastructure"
    docker-compose restart $@
    ;;

  ps)
    goto "infrastructure"
    docker-compose ps
    ;;

  logs)
    goto "infrastructure"
    docker-compose logs $@
    ;;

  update)
    goto
    if [ -z ${1+x} ]; then
      git pull
    else
      git pull origin "$1"
    fi
    ;;

  *)
    help_msg
    ;;
esac
